



Network Working Group                                         T. Meunier
Internet-Draft                                                Cloudflare
Intended status: Informational                             10 April 2025
Expires: 12 October 2025


       HTTP Message Signatures for automated traffic Architecture
             draft-meunier-web-bot-auth-architecture-latest

Abstract

   This document describes an architecture for identifying automated
   traffic using [HTTP-MESSAGE-SIGNATURE].  The goal is to allow
   automated HTTP clients to cryptographically sign outbound requests,
   allowing HTTP servers to verify their identity with confidence.

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at
   https://thibmeu.github.io/http-message-signatures-directory/draft-
   meunier-web-bot-auth-architecture.html.  Status information for this
   document may be found at https://datatracker.ietf.org/doc/draft-
   meunier-web-bot-auth-architecture/.

   Source for this draft and an issue tracker can be found at
   https://github.com/thibmeu/http-message-signatures-directory.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 12 October 2025.

Copyright Notice

   Copyright (c) 2025 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Conventions and Definitions
   3.  System
     3.1.  Generating Message signature
     3.2.  Requesting a Message signature
     3.3.  Validating Message signature
     3.4.  Anti-replay
     3.5.  Discovery
       3.5.1.  Out-of-band communication between client and origin
       3.5.2.  Public list
       3.5.3.  Operating-Agent header
   4.  Security Considerations
   5.  IANA Considerations
   6.  Normative References
   Acknowledgments
   Implementations
   Author's Address

1.  Introduction

   Automated agents are increasingly used for legitimate purposes,
   including AI assistants, indexing, testing, and automated support
   tools.  These agents often use general-purpose browsers, making it
   difficult for websites to authenticate or identify them.  Existing
   methods, such as IP range allowlisting or User-Agent strings, offer
   no integrity guarantees and are hard to maintain.

   This document proposes a mechanism in which outbound HTTP requests
   are signed using [HTTP-MESSAGE-SIGNATURE].  These signatures can be
   verified by receiving servers using a public key associated with the
   platform provider.  This enables trusted interactions between
   automated agents and HTTP servers, with improved security and
   manageability.

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

3.  System

     +---------+             +-----------------+             +--------+
     |  User   |             | Automated Agent |             | Origin |
     +----+----+             +--------+--------+             +---+----+
          |                          |                           |
          |  Help me do this!        |                           |
          +------------------------->|                           |
          |                          |  GET /path/to/resource    |
          |                          |  Signature: abc===        |
          |                          +-------------------------->|
          |                          |                           |
          |                          |     <h1>Response</h1>     |
          |                          |<--------------------------+
          |  Here are proposals      |                           |
          +<-------------------------+                           |
          |                          |                           |

   Our system has three actors:

   User: wants to perform some actions on the web.  Automated Agent:
   orchestrated user agent, such as Chromium.  Can interact with the
   web, implements web standards.  For every request, it constructs a
   valid HTTP request with [HTTP-MESSAGE-SIGNATURE] signature.  Origin:
   server hosting a resource.  The user wants to access it through the
   browser.

3.1.  Generating Message signature

   RFC 9421 defines components to be signed.  The following parameters
   will need to be signed: * @authority * @signature-params(created,
   expires, keyid)

   The private key is available to the automated agent at request time.
   Algorithms should be registered with IANA as part of HTTP Message
   Signatures Algorithm registry.

   The creation of the signature is defined in RFC 9421, Section 3.1.

3.2.  Requesting a Message signature

   RFC 9421 defines the Accept-Signature field which can be used to
   request a Message Signature from a client by a server.  Servers MAY
   choose to request signatures from clients that did not initially
   provide them.  If requesting, servers are expected to request the
   same parameters as those defined by the Generating Message Signature
   section.

3.3.  Validating Message signature

   Upon receiving an HTTP request, the origin website has to verify the
   signature.  The algorithm is provided in RFC 9421, Section 3.2.
   Similar to regular User-Agent check, this happens at the HTTP layer,
   once headers are received.

   If the key ID is not known, the origin MAY look at Operating-Agent
   header as described in ((MESSAGESIG-DIRECTOIRY-DRAFT))

   If any of the steps from Section 3.2 fail, the signature validation
   fails.

3.4.  Anti-replay

   Origins may want to to prevent signatures from being spoofed or used
   multiple times by bad actors and thus require a nonce to be added to
   the signature-params.  This nonce would have to be unique for the
   validity window of the signature, as defined by created and expires
   attributes.  Because the nonce is controlled by the client the origin
   needs to maintain a list of all nonces that it has seen that are
   still in the validity window of the signature.  In addition, for
   platform providers offering different services, ai models, or others,
   the tag attribute of signature-params may be used.

3.5.  Discovery

   This section describes the discovery mechanism for the automated
   agent directory.

   The reference for discovery is a FQDN.  It SHOULD provide a directory
   hosted on the well known registered in ((MESSAGESIG-DIRECTOIRY-
   DRAFT))

   We add one field to the directory defined in the other draft:
   "purpose": Ideally matches some IANA registry for preferences

   TODO: replace the key with a JWK

   Example

   {
     keys: [{
       alg:"ed25519",
       key: "-----BEGIN PUBLIC KEY-----...",
       not-before: 1743578485, // optional
       not-after: 1745000000, // optional
     }],
     operating_agent: "my.company.agent.test", // optional. SHOULD match the operating agent domain
     purpose: "search" // Ideally matches some IANA registry for preferences
   }

3.5.1.  Out-of-band communication between client and origin

   A service submitting their key to an origin, or the origin manually
   adding a service to their trusted list

3.5.2.  Public list

   Could be a GitHub repository like the public suffix list.  The issue
   is the gating of such repositories, and therefore its governance.

3.5.3.  Operating-Agent header

   This is defined in the sibling draft.  This allows for backward
   compatibility with existing header agent filtering, and an upgrade to
   cryptographically secured protocol.

4.  Security Considerations

   TODO Security

5.  IANA Considerations

   This document has no IANA actions.

6.  Normative References

   [HTTP]     Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,
              Ed., "HTTP Semantics", STD 97, RFC 9110,
              DOI 10.17487/RFC9110, June 2022,
              <https://www.rfc-editor.org/rfc/rfc9110>.

   [HTTP-CACHE]
              Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,
              Ed., "HTTP Caching", STD 98, RFC 9111,
              DOI 10.17487/RFC9111, June 2022,
              <https://www.rfc-editor.org/rfc/rfc9111>.

   [HTTP-MESSAGE-SIGNATURE]
              Backman, A., Ed., Richer, J., Ed., and M. Sporny, "HTTP
              Message Signatures", RFC 9421, DOI 10.17487/RFC9421,
              February 2024, <https://www.rfc-editor.org/rfc/rfc9421>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

Acknowledgments

   TODO acknowledge.

Implementations

   This draft has a couple of implementations

   Clients: * Chrome MV3 * Cloudflare Workers

   Servers: * Caddy plugin * Cloudflare Workers

   A demontstration server has been deployed to https://http-message-
   signatures-example.research.cloudflare.com/ It uses RFC9421 ed25519
   test signing and verifying keys.

Author's Address

   Thibault Meunier
   Cloudflare
   Email: ot-ietf@thibault.uk
